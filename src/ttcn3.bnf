

{
      parserClass="com.intelliTtcn3.parser.TtcnParser"

      extends="com.intellij.extapi.psi.ASTWrapperPsiElement"

      psiClassPrefix="Ttcn"
      psiImplClassSuffix="Impl"
      psiPackage="com.intelliTtcn3.psi"
      psiImplPackage="com.intelliTtcn3.psi.impl"

      elementTypeHolderClass="com.intelliTtcn3.psi.TtcnTypes"
      elementTypeClass="com.intelliTtcn3.psi.TtcnElementType"
      tokenTypeClass="com.intelliTtcn3.psi.TtcnTokenType"

      //psiImplUtilClass="com.intelliTtcn3.psi.impl.TtcnPsiImplUtil"


tokens=[
   TTCN_IMPORT='import'
   TTCN_FROM='from'
   TTCN_RECURSIVE='recursive'
   TTCN_ALL='all'
   TTCN_EXCEPT='except'
   TTCN_SYSTEM='system'
   TTCN_MODULE='module'
   TTCN_FUNCTIOIN='function'
   TTCN_RUNS='runs'
   TTCN_ON='on'
   TTCN_CONST='const'
   TTCN_PASS='pass'
   TTCN_FAIL='fail'
   TTCN_INCONC='inconc'
   TTCN_NONE='none'
   TTCN_ERROR='error'
   TTCN_CONTROL='control'
   TTCN_EXECUTE='execute'
   TTCN_ALTSTEP='altstep'
   TTCN_TESTCASE='testcase'
   TTCN_PUBLIC="public"
   TTCN_FRIEND="friend"
   TTCN_PRIVATE="private"
   TTCN_ACTIVTE='activate'
   TTCN_DEACTIVTE='deactivate'
   TTCN_ACTION='action'
   TTCN_GETVERDICT='getverdict'
   TTCN_SETVERDICT='setverdict'
   TTCN_LANGUAGE='language'
   TTCN_MODIFIES='modifies'
   TTCN_VALUE='value'
   TTCN_SENDER='sender'
   TTCN_MTC='mtc'
   TTCN_RETURN='return'
   TTCN_PROCEDURE='procedure'
   TTCN_MIXED='mixed'
   TTCN_PATTERN='pattern'
   TTCN_COMPLEMENT='complement'
   TTCN_SUBSET='subset'
   TTCN_SUPERSET='superset'
   TTCN_PERMUTATION='permutation'
   TTCN_IFPRESENT='ifpresent'
   TTCN_INFINITY='infinity'
   TTCN_MATCH='match'
   TTCN_VALUEOF='valueof'
   TTCN_DISCONNECT='disconnect'
   TTCN_MAP='map'
   TTCN_UNMAP='unmap'
   TTCN_START='start'

   TTCN_GROUP='group'
   TTCN_TYPE='type'
   TTCN_PORT='port'
   TTCN_COMPONENT='component'
   TTCN_SIGNATURE='signature'
   TTCN_EXTERNAL='external'
   TTCN_TEMPLATE='template'
   TTCN_VAR='var'
   TTCN_TIMER='timer'
   TTCN_MODULEPAR='modulepar'
   TTCN_LOG='log'
   TTCN_LENGTH='length'


   TTCN_IF='if'
   TTCN_ELSE='else'
   TTCN_WHILE='while'
   TTCN_DO='do'
   TTCN_ALT='alt'
   TTCN_FOR='for'
   TTCN_CASE='case'
   TTCN_CONTINUE='continue'
   TTCN_BREAK='break'
   TTCN_REPEAT='repeat'
   TTCN_GOTO='goto'
   TTCN_LABEL='label'
   TTCN_INTERLEAVE='interleave'
   TTCN_EXTENDS='extends'
   TTCN_TO='to'
   TTCN_REM='rem'

   TTCN_INTEGER='integer'
   TTCN_CHAR='char'
   TTCN_UCHAR='universal char'
   TTCN_FLOAT='float'
   TTCN_BOOL='boolean'
   TTCN_TRUE='true'
   TTCN_FALSE='false'
   TTCN_OBJID='objid'
   TTCN_VERDICTTYPE='verdicttype'
   TTCN_BITSTRING='bitstring'
   TTCN_HEXSTRING='hexstring'
   TTCN_OCTETSTRING='octetstring'
   TTCN_CHARSTRING='charstring'
   TTCN_UNIVERSAL='universal'
   TTCN_RECORD='record'
   TTCN_OF='of'
   TTCN_SET='set'
   TTCN_ENUMERATED='enumerated'
   TTCN_UNION='union'
   TTCN_ANYTYPE='anytype'
   TTCN_ADDRESS='address'
   TTCN_PORT='port'
   TTCN_COMPONENT='component'
   TTCN_DEFAULT='default'
   TTCN_OMIT='omit'
   TTCN_OPTIONAL='optional'
   TTCN_LENGTH='length'
   TTCN_SIZEOF='sizeof'
   TTCN_NOT='not'
   TTCN_AND='and'
   TTCN_XOR='xor'
   TTCN_OR='or'
   TTCN_OR4B='or4b'
   TTCN_XOR4B='xor4b'
   TTCN_AND4B='and4b'
   TTCN_NOT4B='not4b'
   TTCN_IN='in'
   TTCN_OUT='out'
   TTCN_INOUT='inout'
   TTCN_MOD='mod'
   TTCN_NOWAIT='nowait'
   TTCN_ANY='any'
   TTCN_CHECKSTATE='checkstate'
   TTCN_MESSAGE='message'

   TTCN_SEND='send'
   TTCN_RECEIVE='receive'
   TTCN_TRIGGER='trigger'
   TTCN_CALL='call'
   TTCN_GETCALL='getcall'
   TTCN_REPLY='reply'
   TTCN_GETREPLY='getreply'
   TTCN_RAISE='raise'
   TTCN_SELECT='select'
   TTCN_WITH='with'
   TTCN_NULL='null'
   TTCN_CREATE='create'
   TTCN_ALIVE='alive'
   TTCN_CONNECTS='connect'
   TTCN_RUNNING='running'
   TTCN_DONE='done'
   TTCN_KILLED='killed'
   TTCN_SELF='self'
   TTCN_PARAM='param'
   TTCN_PRESENT='present'
   TTCN_EXCEPTION='exception'
   TTCN_NOBLOCK='noblock'
   TTCN_KILL='kill'
   TTCN_CATCH='catch'
   TTCN_CKECK='check'
   TTCN_CLEAR='clear'
   TTCN_STOP='stop'
   TTCN_HALT='halt'
   TTCN_READ='read'
   TTCN_TIMEOUT='timeout'
   TTCN_NOT_A_NUM='not_a_number'
   TTCN_ENCODE='encode'
   TTCN_VARIANT='variant'
   TTCN_DISPLAY='display'
   TTCN_EXTENSION='extension'
   TTCN_OVERRIDE='override'
   TTCN_AT_INDEX='@index'
   TTCN_AT_DETERMINISTIC='@deterministic'
   TTCN_AT_LAZY='@lazy'
   TTCN_AT_FUZZY='@fuzzy'

   TTCN_LM='['
   TTCN_RM=']'
   TTCN_ASSIGN=':='
   TTCN_LB='{'
   TTCN_RB='}'
   TTCN_QUOTES='"'
   TTCN_COMMA=','
   TTCN_DOT='.'
   TTCN_CONNECT='&'
   TTCN_POINT_CONNECT='..'
   TTCN_SEMI=';'
   TTCN_LP='('
   TTCN_RP=')'
   TTCN_ADD='+'
   TTCN_SUB='-'
   TTCN_MUL='*'
   TTCN_DIV='/'
   TTCN_EXCL='!'
   TTCN_COLON=':'
   TTCN_QUESTION='?'
   TTCN_POINT_TO='->'
   TTCN_LARGER='>'
   TTCN_LESS='<'
   TTCN_LARGER_EQ='>='
   TTCN_LESS_EQ='<='
   TTCN_EQ='=='
   TTCN_NOT_EQ='!='
   TTCN_LEFT_SHIFT='<<'
   TTCN_RIGHT_SHIFT='>>'
   TTCN_LEFT_SHIFT_AT='<@'
   TTCN_RIGHT_SHIFT_AT='@>'
   TTCN_UNDERSCORE='_'

   TTCN_SPACE='regexp:\s+'
   TTCN_LINECOMMENT='regexp://.*'
   TTCN_BLOCKCOMMENT='regexp:/\*(.|\n)*\*/'
   TTCN_COMMENT='COMMENT'
   TTCN_NUMBER='regexp:\d+(\.\d*)?'
   TTCN_NON_ZERO_NUMBER='regexp:[1-9]'
   TTCN_NUM='regexp:[0-9]'
   TTCN_ID='regexp:\p{Alpha}\w*'
   TTCN_STRING="regexp:('([^'\\]|\\.)*'|\"([^\"\\]|\\.)*\")"
   TTCN_ID='regexp:\p{Alpha}\w*'
   TTCN_UPPERCHAR='regexp:\p{Upper}'
   TTCN_LOWERCHAR='regexp:\p{Lower}'
   TTCN_HEX='regexp:\p{XDigit}'
   TTCN_BIN='regexp:[0-1]'
   TTCN_BSTRING="regexp:\'[0-1]*\'B"
   TTCN_HSTRING="regexp:\'[0-9A-Fa-f]*\'H"
   TTCN_OSTRING="regexp:\'[0-9A-Fa-f]+[0-9A-Fa-f]+\'O"

 ]
}

root ::= !<<eof>> Module {pin=1}
Module ::= TTCN_MODULE ModuleId TTCN_LB Content* TTCN_RB WithStatement? TTCN_SEMI? {pin=1}
private Content ::= ModuleDefinitionsList | ModuleControlPart
private ModuleId ::= Identifier LanguageSpec?
private LanguageSpec ::= TTCN_LANGUAGE FreeText (TTCN_COMMA FreeText)*
ModuleDefinitionsList ::= (ModuleDefinition TTCN_SEMI?)+
private ModuleDefinition ::= ( ( Visibility ? ( TypeDef | ConstDef | TemplateDef | ModuleParDef | FunctionDef | SignatureDef | TestcaseDef | AltstepDef | ImportDef | ExtFunctionDef | ExtConstDef ) ) | ( TTCN_PUBLIC? GroupDef ) | ( TTCN_PRIVATE? FriendModuleDef ) ) WithStatement?
private Visibility ::= TTCN_PUBLIC | TTCN_FRIEND| TTCN_PRIVATE
TypeDef ::= TTCN_TYPE TypeDefBody
private TypeDefBody ::= StructuredTypeDef | SubTypeDef
private StructuredTypeDef ::= RecordDef | UnionDef | SetDef | RecordOfDef | SetOfDef | EnumDef | PortDef | ComponentDef
RecordDef ::= TTCN_RECORD StructDefBody
private StructDefBody ::= ( Identifier | AddressKeyword ) TTCN_LB (StructFieldDef ( TTCN_COMMA StructFieldDef )* )? TTCN_RB
private StructFieldDef ::= ( Type | NestedTypeDef ) Identifier ArrayDef? SubTypeSpec? TTCN_OPTIONAL?
NestedTypeDef ::= NestedRecordDef | NestedUnionDef | NestedSetDef | NestedRecordOfDef | NestedSetOfDef | NestedEnumDef
NestedRecordDef ::= TTCN_RECORD TTCN_LB (StructFieldDef ( TTCN_COMMA StructFieldDef )*)? TTCN_RB
NestedUnionDef ::= TTCN_UNION TTCN_LB UnionFieldDef ( TTCN_COMMA UnionFieldDef )* TTCN_RB
NestedSetDef ::= TTCN_SET TTCN_LB (StructFieldDef ( TTCN_COMMA StructFieldDef )* )? TTCN_RB
NestedRecordOfDef ::= TTCN_RECORD StringLength? TTCN_OF ( Type | NestedTypeDef )
NestedSetOfDef ::= TTCN_SET StringLength? TTCN_OF ( Type | NestedTypeDef )
NestedEnumDef ::= TTCN_ENUMERATED TTCN_LB EnumerationList TTCN_RB
UnionDef ::= TTCN_UNION UnionDefBody
private UnionDefBody ::= ( Identifier | AddressKeyword ) TTCN_LB UnionFieldDef ( TTCN_COMMA UnionFieldDef )* TTCN_RB
private UnionFieldDef ::= ( Type | NestedTypeDef ) Identifier ArrayDef? SubTypeSpec?
SetDef ::= TTCN_SET StructDefBody
RecordOfDef ::= TTCN_RECORD StringLength? TTCN_OF StructOfDefBody
private StructOfDefBody ::= ( Type | NestedTypeDef ) ( Identifier | AddressKeyword ) SubTypeSpec?
SetOfDef ::= TTCN_SET StringLength? TTCN_OF StructOfDefBody
EnumDef ::= TTCN_ENUMERATED ( Identifier | AddressKeyword ) TTCN_LB EnumerationList TTCN_RB
private EnumerationList ::= Enumeration ( TTCN_COMMA Enumeration)*
Enumeration ::= Identifier (TTCN_LP TTCN_SUB? Number TTCN_RP)?
private SubTypeDef ::= Type ( Identifier | AddressKeyword ) ArrayDef? SubTypeSpec?
SubTypeSpec ::= AllowedValuesSpec StringLength? | StringLength
AllowedValuesSpec ::= TTCN_LP ( ( TemplateOrRange ( TTCN_COMMA TemplateOrRange )* ) | CharStringMatch ) TTCN_RP
TemplateOrRange ::= RangeDef | TemplateBody | Type
RangeDef ::= Bound TTCN_POINT_CONNECT Bound
private StringLength ::= TTCN_LENGTH TTCN_LP SingleExpression ( TTCN_POINT_CONNECT Bound )? TTCN_RP
PortDef ::= TTCN_PORT PortDefBody
private PortDefBody ::= Identifier PortDefAttribs
private PortDefAttribs ::= MessageAttribs | ProcedureAttribs | MixedAttribs
MessageAttribs ::= TTCN_MESSAGE TTCN_LB ( ( AddressDecl | MessageList | ConfigParamDef ) TTCN_SEMI? )+ TTCN_RB
ConfigParamDef ::= MapParamDef | UnmapParamDef
MapParamDef ::= TTCN_MAP TTCN_PARAM TTCN_LP FormalValuePar (TTCN_COMMA FormalValuePar)* TTCN_RP
UnmapParamDef ::= TTCN_UNMAP TTCN_PARAM TTCN_LP FormalValuePar (TTCN_COMMA FormalValuePar)* TTCN_RP
AddressDecl ::= AddressKeyword Type
MessageList ::= Direction AllOrTypeList
Direction ::= InParKeyword | OutParKeyword | InOutParKeyword
AllOrTypeList ::= TTCN_ALL | TypeList
TypeList ::= Type ( TTCN_COMMA Type )*
ProcedureAttribs ::= TTCN_PROCEDURE TTCN_LB ( ( AddressDecl | ProcedureList | ConfigParamDef ) TTCN_SEMI? )+ TTCN_RB
ProcedureList ::= Direction AllOrSignatureList
AllOrSignatureList ::= TTCN_ALL | SignatureList
SignatureList ::= Signature ( TTCN_COMMA Signature )*
MixedAttribs ::= TTCN_MIXED TTCN_LB (( AddressDecl | MixedList | ConfigParamDef ) TTCN_SEMI? )+ TTCN_RB
MixedList ::= Direction ProcOrTypeList
ProcOrTypeList ::= TTCN_ALL | ( ProcOrType ( TTCN_COMMA ProcOrType )* )
ProcOrType ::= Signature | Type
ComponentDef ::= TTCN_COMPONENT Identifier (TTCN_EXTENDS ComponentType ( TTCN_COMMA ComponentType )* )? TTCN_LB ComponentDefList* TTCN_RB
private ComponentType ::= ExtendedIdentifier
ComponentDefList ::= ComponentElementDef WithStatement? TTCN_SEMI?
ComponentElementDef ::= PortInstance | VarInstance | TimerInstance | ConstDef | TemplateDef
PortInstance ::= TTCN_PORT ExtendedIdentifier PortElement ( TTCN_COMMA PortElement )*
PortElement ::= Identifier ArrayDef?
ConstDef ::= TTCN_CONST Type ConstList
private ConstList ::= SingleConstDef ( TTCN_COMMA SingleConstDef )*
SingleConstDef ::= Identifier ArrayDef? TTCN_ASSIGN ConstantExpression
TemplateDef ::= TTCN_TEMPLATE TemplateRestriction? TTCN_AT_FUZZY? BaseTemplate DerivedDef? TTCN_ASSIGN TemplateBody
BaseTemplate ::= ( Type | Signature ) Identifier (TTCN_LP TemplateOrValueFormalParList TTCN_RP)?
DerivedDef ::= TTCN_MODIFIES ExtendedIdentifier
private TemplateOrValueFormalParList ::= TemplateOrValueFormalPar ( TTCN_COMMA TemplateOrValueFormalPar )*
private TemplateOrValueFormalPar ::= FormalValuePar | FormalTemplatePar
TemplateBody ::= ( SimpleSpec | FieldSpecList | ArrayValueOrAttrib ) ExtraMatchingAttributes?
SimpleSpec ::= ( SingleExpression (TTCN_CONNECT SimpleTemplateSpec)? ) | SimpleTemplateSpec
SimpleTemplateSpec ::= SingleTemplateExpression (TTCN_CONNECT SimpleSpec)?
SingleTemplateExpression ::= MatchingSymbol | ( TemplateRefWithParList ExtendedFieldReference? )
FieldSpecList ::= TTCN_LB FieldSpec ( TTCN_COMMA FieldSpec )* TTCN_RB
FieldSpec ::= FieldReference TTCN_ASSIGN ( TemplateBody | TTCN_SUB )
private FieldReference ::= StructFieldRef | ArrayOrBitRef | ParRef
private StructFieldRef ::= Identifier | PredefinedType | TypeReference
private ParRef ::= Identifier
private ArrayOrBitRef ::= TTCN_LM FieldOrBitNumber TTCN_RM
FieldOrBitNumber ::= SingleExpression
ArrayValueOrAttrib ::= TTCN_LB ArrayElementSpecList? TTCN_RB
ArrayElementSpecList ::= ArrayElementSpec ( TTCN_COMMA ArrayElementSpec )*
ArrayElementSpec ::= TTCN_SUB | PermutationMatch | TemplateBody
MatchingSymbol ::= Complement | ( TTCN_QUESTION WildcardLengthMatch? ) | ( TTCN_MUL WildcardLengthMatch? ) | ListOfTemplates | Range | BitStringMatch | HexStringMatch | OctetStringMatch | CharStringMatch | SubsetMatch | SupersetMatch
ExtraMatchingAttributes ::= StringLength | TTCN_IFPRESENT | ( StringLength TTCN_IFPRESENT )
BitStringMatch ::= "'" BinOrMatch* "'" "B"
BinOrMatch ::= Bin | TTCN_QUESTION | TTCN_MUL
HexStringMatch ::= "'" HexOrMatch* "'" "H"
HexOrMatch ::= Hex | TTCN_QUESTION | TTCN_MUL
OctetStringMatch ::= "'" OctOrMatch* "'" "O"
OctOrMatch ::= Oct | TTCN_QUESTION | TTCN_MUL
CharStringMatch ::= TTCN_PATTERN PatternParticle ( TTCN_CONNECT PatternParticle)*
PatternParticle ::= Pattern | ReferencedValue
Pattern ::= d
//PatternElement ::= ( ( '\' ( "?" | "*" | '\' | "[" | "]" | "{" | "}" | """ | "|" | "(" | ")" | '#' | "+" | "d" | "w" | "t" | "n" | "r" | "s" | "b" ) ) | ( "?" | "*" | "\" | "|" | "+" ) | ( "[" [ "^" ] [ { PatternClassChar [ "-" PatternClassChar ] } ] "]" ) | ( "{" [ "\" ] ReferencedValue "}" ) | ( "\" "N" "{" ( ReferencedValue | Type ) "}" ) | ( """ """ ) | ( "(" PatternElement ")" ) | ( "#" ( Num | ( "(" Number "," [ Number ] ")" ) | ( "(" "," Number ")" ) | ( "(" [ "," ] ")" ) Num ")" ) ) ) | PatternChar
//PatternChar ::= NonSpecialPatternChar | PatternQuadruple
//NonSpecialPatternChar ::= Char
//PatternClassChar ::= NonSpecialPatternClassChar | PatternQuadruple
//NonSpecialPatternClassChar ::= Char
//EscapedPatternClassChar ::= TTCN_LM | "-" | "^" | TTCN_RM
//PatternQuadruple ::= "\" "q" "(" Number "," Number "," Number "," Number ")"
Complement ::= TTCN_COMPLEMENT ListOfTemplates
ListOfTemplates ::= TTCN_LP TemplateListItem (TTCN_COMMA TemplateListItem)* TTCN_RP
TemplateListItem ::= TemplateBody | AllElementsFrom
AllElementsFrom ::= TTCN_ALL TTCN_FROM TemplateBody
SubsetMatch ::= TTCN_SUBSET ListOfTemplates
SupersetMatch ::= TTCN_SUPERSET ListOfTemplates
PermutationMatch ::= PermutationKeyword ListOfTemplates
PermutationKeyword ::= TTCN_PERMUTATION
TemplateList ::= TTCN_LP TemplateBody (TTCN_COMMA TemplateBody)+ TTCN_RP
WildcardLengthMatch ::= TTCN_LENGTH TTCN_LP SingleExpression TTCN_RP
Range ::= TTCN_LP Bound TTCN_POINT_CONNECT Bound TTCN_RP
Bound ::= ( (TTCN_EXCL)? SingleExpression ) | ( TTCN_SUB? TTCN_INFINITY )
TemplateInstanceAssignment ::= Identifier TTCN_ASSIGN InLineTemplate
TemplateRefWithParList ::= ExtendedIdentifier TemplateActualParList?
private InLineTemplate ::= ( ( Type | Signature ) TTCN_COLON )? ( DerivedRefWithParList TTCN_ASSIGN)? TemplateBody
DerivedRefWithParList ::= TTCN_MODIFIES TemplateRefWithParList
TemplateActualParList ::= TTCN_LP ( ( TemplateInstanceActualPar ( TTCN_COMMA TemplateInstanceActualPar )* ) | ( TemplateInstanceAssignment ( TTCN_COMMA TemplateInstanceAssignment )* ) )? TTCN_RP
TemplateInstanceActualPar ::= InLineTemplate | TTCN_SUB
TemplateOps ::= MatchOp | ValueofOp
MatchOp ::= TTCN_MATCH TTCN_LP Expression TTCN_COMMA InLineTemplate TTCN_RP
ValueofOp ::= TTCN_VALUEOF TTCN_LP InLineTemplate TTCN_RP
FunctionDef ::= TTCN_FUNCTIOIN TTCN_AT_DETERMINISTIC? Identifier TTCN_LP FunctionFormalParList? TTCN_RP RunsOnSpec? MtcSpec? SystemSpec? ReturnType? StatementBlock
FunctionFormalParList ::= FunctionFormalPar ( TTCN_COMMA FunctionFormalPar )*
private FunctionFormalPar ::= FormalValuePar | FormalTimerPar | FormalTemplatePar | FormalPortPar
ReturnType ::= TTCN_RETURN (TTCN_TEMPLATE | RestrictedTemplate )? Type
RunsOnSpec ::= TTCN_RUNS TTCN_ON ComponentType
MtcSpec ::= TTCN_MTC ComponentType
StatementBlock ::= TTCN_LB FunctionDefList* FunctionStatementList* TTCN_RB
private FunctionDefList ::= ( FunctionLocalDef | FunctionLocalInst ) WithStatement? TTCN_SEMI?
private FunctionStatementList ::= FunctionStatement TTCN_SEMI?
private FunctionLocalInst ::= VarInstance | TimerInstance
private FunctionLocalDef ::= ConstDef | TemplateDef
FunctionStatement ::= ConfigurationStatements | TimerStatements | CommunicationStatements | BasicStatements | BehaviourStatements | SetLocalVerdict | SUTStatements | TestcaseOperation
FunctionInstance ::= FunctionRef TTCN_LP FunctionActualParList? TTCN_RP
FunctionRef ::= (Identifier TTCN_DOT)? Identifier //| PreDefFunctionIdentifier )
//PreDefFunctionIdentifier ::= Identifier
private FunctionActualParList ::= FunctionActlist | FunctionActAssignlist
private FunctionActlist ::= FunctionActualPar ( TTCN_COMMA FunctionActualPar )*
private FunctionActAssignlist ::= FunctionActualParAssignment ( TTCN_COMMA FunctionActualParAssignment )*
private FunctionActualPar ::= ArrayIdentifierRef | InLineTemplate | ComponentRef | TTCN_SUB
private FunctionActualParAssignment ::= TemplateInstanceAssignment | ComponentRefAssignment | ArrayIdentifierRefAssignment
ArrayIdentifierRefAssignment ::= Identifier TTCN_ASSIGN ArrayIdentifierRef
SignatureDef ::= TTCN_SIGNATURE Identifier TTCN_LP SignatureFormalParList? TTCN_RP (ReturnType | TTCN_NOBLOCK)? ExceptionSpec?
SignatureFormalParList ::= FormalValuePar (TTCN_COMMA FormalValuePar)*
ExceptionSpec ::= TTCN_EXCEPTION TTCN_LP TypeList TTCN_RP
Signature ::= ExtendedIdentifier
TestcaseDef ::= TTCN_TESTCASE Identifier TTCN_LP TemplateOrValueFormalParList? TTCN_RP ConfigSpec StatementBlock
ConfigSpec ::= RunsOnSpec SystemSpec?
SystemSpec ::= TTCN_SYSTEM ComponentType
TestcaseInstance ::= TTCN_EXECUTE TTCN_LP ExtendedIdentifier TTCN_LP TestcaseActualParList? TTCN_RP (TTCN_COMMA ( Expression | TTCN_SUB ) (TTCN_COMMA SingleExpression)? )? TTCN_RP
TestcaseActualParList ::= ( TemplateInstanceActualPar (TTCN_COMMA TemplateInstanceActualPar)* ) | ( TemplateInstanceAssignment ( TTCN_COMMA TemplateInstanceAssignment )* )
AltstepDef ::= TTCN_ALTSTEP Identifier TTCN_LP FunctionFormalParList? TTCN_RP RunsOnSpec? MtcSpec? SystemSpec? TTCN_LB AltstepLocalDefList* AltGuardList* TTCN_RB
AltstepLocalDefList ::= ( AltstepLocalDef WithStatement? TTCN_SEMI?)
AltstepLocalDef ::= VarInstance | TimerInstance | ConstDef | TemplateDef
AltstepInstance ::= ExtendedIdentifier TTCN_LP FunctionActualParList? TTCN_RP
ImportDef ::= TTCN_IMPORT ImportFromSpec ImportContent
private ImportContent ::= AllWithExcepts | ImportSpecContent
private ImportSpecContent ::= TTCN_LB ImportSpec* TTCN_RB
private AllWithExcepts ::= TTCN_ALL ExceptsDef?
ExceptsDef ::= TTCN_EXCEPT TTCN_LB ExceptSpec* TTCN_RB
ExceptSpec ::= ExceptElement TTCN_SEMI?
ExceptElement ::= ExceptGroupSpec | ExceptTypeDefSpec | ExceptTemplateSpec | ExceptConstSpec | ExceptTestcaseSpec | ExceptAltstepSpec | ExceptFunctionSpec | ExceptSignatureSpec | ExceptModuleParSpec
ExceptGroupSpec ::= TTCN_GROUP ( QualifiedIdentifierList | TTCN_ALL )
IdentifierListOrAll ::= IdentifierList | TTCN_ALL
ExceptTypeDefSpec ::= TTCN_TYPE IdentifierListOrAll
ExceptTemplateSpec ::= TTCN_TEMPLATE IdentifierListOrAll
ExceptConstSpec ::= TTCN_CONST IdentifierListOrAll
ExceptTestcaseSpec ::= TTCN_TESTCASE IdentifierListOrAll
ExceptAltstepSpec ::= TTCN_ALTSTEP IdentifierListOrAll
ExceptFunctionSpec ::= TTCN_FUNCTIOIN IdentifierListOrAll
ExceptSignatureSpec ::= TTCN_SIGNATURE IdentifierListOrAll
ExceptModuleParSpec ::= TTCN_MODULEPAR IdentifierListOrAll
private ImportSpec ::= ImportElement TTCN_SEMI?
private ImportElement ::= ImportGroupSpec | ImportTypeDefSpec | ImportTemplateSpec | ImportConstSpec | ImportTestcaseSpec | ImportAltstepSpec | ImportFunctionSpec | ImportSignatureSpec | ImportModuleParSpec | ImportImportSpec
private ImportFromSpec ::= TTCN_FROM ModuleId TTCN_RECURSIVE?
ImportGroupSpec ::= TTCN_GROUP ( GroupRefListWithExcept | AllGroupsWithExcept )
GroupRefListWithExcept ::= QualifiedIdentifierWithExcept ( TTCN_COMMA QualifiedIdentifierWithExcept )*
AllGroupsWithExcept ::= TTCN_ALL (TTCN_EXCEPT QualifiedIdentifierList)?
QualifiedIdentifierWithExcept ::= QualifiedIdentifier ExceptsDef?
IdentifierListOrAllWithExcept ::= IdentifierList | AllWithExcept
ImportTypeDefSpec ::= TTCN_TYPE IdentifierListOrAllWithExcept
AllWithExcept ::= TTCN_ALL (TTCN_EXCEPT IdentifierList)?
ImportTemplateSpec ::= TTCN_TEMPLATE IdentifierListOrAllWithExcept
ImportConstSpec ::= TTCN_CONST IdentifierListOrAllWithExcept
ImportAltstepSpec ::= TTCN_ALTSTEP IdentifierListOrAllWithExcept
ImportTestcaseSpec ::= TTCN_TESTCASE IdentifierListOrAllWithExcept
ImportFunctionSpec ::= TTCN_FUNCTIOIN IdentifierListOrAllWithExcept
ImportSignatureSpec ::= TTCN_SIGNATURE IdentifierListOrAllWithExcept
ImportModuleParSpec ::= TTCN_MODULEPAR IdentifierListOrAllWithExcept
ImportImportSpec ::= TTCN_IMPORT TTCN_ALL
GroupDef ::= TTCN_GROUP Identifier TTCN_LB ModuleDefinitionsList? TTCN_RB
ExtFunctionDef ::= TTCN_EXTERNAL TTCN_FUNCTIOIN TTCN_AT_DETERMINISTIC? Identifier TTCN_LP FunctionFormalParList? TTCN_RP ReturnType?
ExtConstDef ::= TTCN_EXTERNAL TTCN_CONST Type IdentifierList
ModuleParDef ::= TTCN_MODULEPAR ( ModulePar | ( TTCN_LB MultitypedModuleParList* TTCN_RB ) )
MultitypedModuleParList ::= (ModulePar TTCN_SEMI?)
ModulePar ::= Type ModuleParList
private ModuleParList ::= Identifier (TTCN_ASSIGN ConstantExpression)? ( TTCN_COMMA Identifier (TTCN_ASSIGN ConstantExpression)? )*
FriendModuleDef ::= TTCN_FRIEND TTCN_MODULE IdentifierList TTCN_SEMI?
ModuleControlPart ::= TTCN_CONTROL TTCN_LB ModuleControlBody TTCN_RB WithStatement? TTCN_SEMI?
ModuleControlBody ::= ControlStatementOrDefList?
ControlStatementOrDefList ::= (ControlStatementOrDef TTCN_SEMI?)+
ControlStatementOrDef ::= ( FunctionLocalDef | FunctionLocalInst ) WithStatement? | ControlStatement
ControlStatement ::= TimerStatements | BasicStatements | BehaviourStatements | SUTStatements | TTCN_STOP
VarInstance ::= TTCN_VAR ( ( (TTCN_AT_LAZY | TTCN_AT_FUZZY)? Type VarList ) | ( ( TTCN_TEMPLATE | RestrictedTemplate ) (TTCN_AT_LAZY | TTCN_AT_FUZZY)? Type TempVarList ) )
VarList ::= SingleVarInstance ( TTCN_COMMA SingleVarInstance )*
SingleVarInstance ::= Identifier ArrayDef? (TTCN_ASSIGN Expression)?
TempVarList ::= SingleTempVarInstance ( TTCN_COMMA SingleTempVarInstance)*
SingleTempVarInstance ::= Identifier ArrayDef? (TTCN_ASSIGN TemplateBody)?
VariableRef ::= Identifier ExtendedFieldReference?
TimerInstance ::= TTCN_TIMER VarList
private ArrayIdentifierRef ::= Identifier ArrayOrBitRef*
private ConfigurationStatements ::= ConnectStatement | MapStatement | DisconnectStatement | UnmapStatement | DoneStatement | KilledStatement | StartTCStatement | StopTCStatement | KillTCStatement
ConfigurationOps ::= CreateOp | TTCN_SELF | TTCN_SYSTEM | TTCN_MTC | RunningOp | AliveOp
private CreateOp ::= ComponentType TTCN_DOT TTCN_CREATE ( TTCN_LP ( SingleExpression | TTCN_SUB ) ( TTCN_COMMA SingleExpression )? TTCN_RP )? TTCN_ALIVE?
DoneStatement ::= ComponentOrAny TTCN_DOT TTCN_DONE IndexAssignment?
private ComponentOrAny ::= ComponentOrDefaultReference | ( TTCN_ANY ( TTCN_COMPONENT | TTCN_FROM VariableRef ) ) | ( TTCN_ALL TTCN_COMPONENT )
IndexAssignment ::= TTCN_POINT_TO IndexSpec
IndexSpec ::= TTCN_AT_INDEX TTCN_VALUE VariableRef
KilledStatement ::= ComponentOrAny TTCN_DOT TTCN_KILLED IndexAssignment?
private RunningOp ::= ComponentOrAny TTCN_DOT TTCN_RUNNING IndexAssignment?
private AliveOp ::= ComponentOrAny TTCN_DOT TTCN_ALIVE IndexAssignment?
ConnectStatement ::= TTCN_CONNECTS SingleConnectionSpec
private SingleConnectionSpec ::= TTCN_LP PortRef TTCN_COMMA PortRef TTCN_RP
private PortRef ::= ComponentRef TTCN_COLON ArrayIdentifierRef
private ComponentRef ::= ComponentOrDefaultReference | TTCN_SYSTEM | TTCN_SELF | TTCN_MTC
ComponentRefAssignment ::= Identifier TTCN_ASSIGN ComponentRef
DisconnectStatement ::= TTCN_DISCONNECT (SingleConnectionSpec | AllConnectionsSpec | AllPortsSpec | AllCompsAllPortsSpec)?
AllConnectionsSpec ::= TTCN_LP PortRef TTCN_RP
AllPortsSpec ::= TTCN_LP ComponentRef TTCN_COLON TTCN_ALL TTCN_PORT TTCN_RP
AllCompsAllPortsSpec ::= TTCN_LP TTCN_ALL TTCN_COMPONENT TTCN_COLON TTCN_ALL TTCN_PORT TTCN_RP
MapStatement ::= TTCN_MAP SingleConnectionSpec ParamClause?
private ParamClause ::= TTCN_PARAM FunctionActualParList
UnmapStatement ::= TTCN_UNMAP (SingleConnectionSpec ParamClause? | AllConnectionsSpec ParamClause? | AllPortsSpec | AllCompsAllPortsSpec)?
StartTCStatement ::= ComponentOrDefaultReference TTCN_DOT TTCN_START TTCN_LP FunctionInstance TTCN_RP
StopTCStatement ::= TTCN_STOP | ( ComponentReferenceOrLiteral | TTCN_ALL TTCN_COMPONENT ) TTCN_DOT TTCN_STOP
ComponentReferenceOrLiteral ::= ComponentOrDefaultReference | TTCN_MTC | TTCN_SELF
KillTCStatement ::= TTCN_KILL | ( ( ComponentReferenceOrLiteral | TTCN_ALL TTCN_COMPONENT ) TTCN_DOT TTCN_KILL )
ComponentOrDefaultReference ::= VariableRef | FunctionInstance
CommunicationStatements ::= SendStatement | CallStatement | ReplyStatement | RaiseStatement | ReceiveStatement | TriggerStatement | GetCallStatement | GetReplyStatement | CatchStatement | CheckStatement | ClearStatement | StartStatement | StopStatement | HaltStatement | CheckStateStatement
SendStatement ::= ArrayIdentifierRef TTCN_DOT PortSendOp
PortSendOp ::= TTCN_SEND TTCN_LP InLineTemplate TTCN_RP ToClause?
ToClause ::= TTCN_TO ( InLineTemplate | AddressRefList | TTCN_ALL TTCN_COMPONENT )
AddressRefList ::= TTCN_LP InLineTemplate ( TTCN_COMMA InLineTemplate )* TTCN_RP
CallStatement ::= ArrayIdentifierRef TTCN_DOT PortCallOp PortCallBody?
PortCallOp ::= TTCN_CALL TTCN_LP CallParameters TTCN_RP ToClause?
CallParameters ::= InLineTemplate (TTCN_COMMA CallTimerValue)?
CallTimerValue ::= Expression | TTCN_NOWAIT
PortCallBody ::= TTCN_LB CallBodyStatementList TTCN_RB
CallBodyStatementList ::= (CallBodyStatement TTCN_SEMI?)+
CallBodyStatement ::= CallBodyGuard StatementBlock
CallBodyGuard ::= AltGuardChar CallBodyOps
CallBodyOps ::= GetReplyStatement | CatchStatement
ReplyStatement ::= ArrayIdentifierRef TTCN_DOT PortReplyOp
PortReplyOp ::= TTCN_REPLY TTCN_LP InLineTemplate ReplyValue? TTCN_RP ToClause?
ReplyValue ::= TTCN_VALUE Expression
RaiseStatement ::= ArrayIdentifierRef TTCN_DOT PortRaiseOp
PortRaiseOp ::= TTCN_RAISE TTCN_LP Signature TTCN_COMMA InLineTemplate TTCN_RP ToClause?
ReceiveStatement ::= PortOrAny TTCN_DOT PortReceiveOp
PortOrAny ::= ArrayIdentifierRef | ( TTCN_ANY ( TTCN_PORT | TTCN_FROM VariableRef ) )
PortReceiveOp ::= TTCN_RECEIVE ( TTCN_LP InLineTemplate TTCN_RP )? FromClause? PortRedirect?
FromClause ::= TTCN_FROM ( InLineTemplate | AddressRefList | TTCN_ANY TTCN_COMPONENT )
PortRedirect ::= TTCN_POINT_TO ( ( ValueSpec SenderSpec? IndexSpec? ) | ( SenderSpec IndexSpec? ) | IndexSpec )
ValueSpec ::= TTCN_VALUE ( VariableRef | ( TTCN_LP SingleValueSpec ( TTCN_COMMA SingleValueSpec )* TTCN_RP ) )
SingleValueSpec ::= VariableRef (TTCN_ASSIGN FieldReference ExtendedFieldReference)?
SenderSpec ::= TTCN_SENDER VariableRef
TriggerStatement ::= PortOrAny TTCN_DOT PortTriggerOp
PortTriggerOp ::= TTCN_TRIGGER (TTCN_LP InLineTemplate TTCN_RP)? FromClause? PortRedirect?
GetCallStatement ::= PortOrAny TTCN_DOT PortGetCallOp
PortGetCallOp ::= TTCN_GETCALL (TTCN_LP InLineTemplate TTCN_RP)? FromClause? PortRedirectWithParam?
PortRedirectWithParam ::= TTCN_POINT_TO RedirectWithParamSpec
RedirectWithParamSpec ::= ( ParamSpec SenderSpec? IndexSpec? ) | ( SenderSpec IndexSpec? ) | IndexSpec
ParamSpec ::= TTCN_PARAM ParamAssignmentList
ParamAssignmentList ::= TTCN_LP ( AssignmentList | VariableList ) TTCN_RP
AssignmentList ::= VariableAssignment ( TTCN_COMMA VariableAssignment)*
VariableAssignment ::= VariableRef TTCN_ASSIGN Identifier
VariableList ::= VariableEntry (TTCN_COMMA VariableEntry)*
VariableEntry ::= VariableRef | TTCN_SUB
GetReplyStatement ::= PortOrAny TTCN_DOT PortGetReplyOp
PortGetReplyOp ::= TTCN_GETREPLY (TTCN_LP InLineTemplate ValueMatchSpec? TTCN_RP)? FromClause? PortRedirectWithValueAndParam?
PortRedirectWithValueAndParam ::= TTCN_POINT_TO RedirectWithValueAndParamSpec
RedirectWithValueAndParamSpec ::= ( ValueSpec ParamSpec? SenderSpec? IndexSpec? ) | RedirectWithParamSpec
ValueMatchSpec ::= TTCN_VALUE InLineTemplate
CheckStatement ::= PortOrAny TTCN_DOT PortCheckOp
PortCheckOp ::= TTCN_CKECK ( TTCN_LP CheckParameter TTCN_RP )?
CheckParameter ::= CheckPortOpsPresent | FromClausePresent | RedirectPresent
FromClausePresent ::= FromClause (TTCN_POINT_TO ( ( SenderSpec IndexSpec? ) | IndexSpec ) )?
RedirectPresent ::= TTCN_POINT_TO ( ( SenderSpec IndexSpec? ) | IndexSpec )
CheckPortOpsPresent ::= PortReceiveOp | PortGetCallOp | PortGetReplyOp | PortCatchOp
CatchStatement ::= PortOrAny TTCN_DOT PortCatchOp
PortCatchOp ::= TTCN_CATCH ( TTCN_LP CatchOpParameter TTCN_RP )? FromClause? PortRedirect?
CatchOpParameter ::= Signature TTCN_COMMA InLineTemplate | TTCN_TIMEOUT
ClearStatement ::= PortOrAll TTCN_DOT TTCN_CLEAR
PortOrAll ::= ArrayIdentifierRef | TTCN_ALL TTCN_PORT
StartStatement ::= PortOrAll TTCN_DOT TTCN_START
StopStatement ::= PortOrAll TTCN_DOT TTCN_STOP
HaltStatement ::= PortOrAll TTCN_DOT TTCN_HALT
CheckStateStatement ::= PortOrAllAny TTCN_DOT TTCN_CHECKSTATE TTCN_LP SingleExpression TTCN_RP
PortOrAllAny ::= PortOrAll | TTCN_ANY TTCN_PORT
TimerStatements ::= StartTimerStatement | StopTimerStatement | TimeoutStatement
TimerOps ::= ReadTimerOp | RunningTimerOp
StartTimerStatement ::= ArrayIdentifierRef TTCN_DOT TTCN_START ( TTCN_LP Expression TTCN_RP )?
StopTimerStatement ::= TimerRefOrAll TTCN_DOT TTCN_STOP
TimerRefOrAll ::= ArrayIdentifierRef | TTCN_ALL TTCN_TIMER
ReadTimerOp ::= ArrayIdentifierRef TTCN_DOT TTCN_READ
RunningTimerOp ::= TimerRefOrAny TTCN_DOT TTCN_RUNNING IndexAssignment?
TimeoutStatement ::= TimerRefOrAny TTCN_DOT TTCN_TIMEOUT IndexAssignment?
TimerRefOrAny ::= ArrayIdentifierRef | ( TTCN_ANY TTCN_TIMER ) | ( TTCN_ANY TTCN_FROM Identifier )
TestcaseOperation ::= TTCN_TESTCASE TTCN_DOT TTCN_STOP (TTCN_LP ( ( FreeText | InLineTemplate ) (TTCN_COMMA)? )* TTCN_RP)?
Type ::= PredefinedType | ReferencedType
private PredefinedType ::= BitStringKeyword | BooleanKeyword | CharStringKeyword | UniversalCharString | IntegerKeyword | OctetStringKeyword | HexStringKeyword | VerdictTypeKeyword | FloatKeyword | AddressKeyword | DefaultKeyword | AnyTypeKeyword
private BitStringKeyword ::= TTCN_BITSTRING
private BooleanKeyword ::= TTCN_BOOL
private IntegerKeyword ::= TTCN_INTEGER
private OctetStringKeyword ::= TTCN_OCTETSTRING
private HexStringKeyword ::= TTCN_HEXSTRING
private VerdictTypeKeyword ::= TTCN_VERDICTTYPE
private FloatKeyword ::= TTCN_FLOAT
private AddressKeyword ::= TTCN_ADDRESS
private DefaultKeyword ::= TTCN_DEFAULT
private AnyTypeKeyword ::= TTCN_ANYTYPE
private CharStringKeyword ::= TTCN_CHARSTRING
private UniversalCharString ::= UniversalKeyword CharStringKeyword
private UniversalKeyword ::= TTCN_UNIVERSAL
private ReferencedType ::= ExtendedIdentifier ExtendedFieldReference?
TypeReference ::= Identifier
ArrayDef ::= ( TTCN_LM SingleExpression ( TTCN_POINT_CONNECT SingleExpression )? TTCN_RM )+
Value ::= ReferencedValue | PredefinedValue
private PredefinedValue ::= Bstring | BooleanValue | CharStringValue | Number | Ostring | Hstring | VerdictTypeValue | Identifier | AddressValue | OmitKeyword  //| FloatValue
private BooleanValue ::= TTCN_TRUE | TTCN_FALSE
private VerdictTypeValue ::= TTCN_PASS | TTCN_FAIL | TTCN_INCONC | TTCN_NONE | TTCN_ERROR
private CharStringValue ::= Cstring | Quadruple
Quadruple ::= CharKeyword TTCN_LP Number TTCN_COMMA Number TTCN_COMMA Number TTCN_COMMA Number TTCN_RP
CharKeyword ::= TTCN_CHAR
//FloatValue ::= FloatDotNotation | FloatENotation | TTCN_NOT_A_NUM
//FloatDotNotation ::= Number TTCN_DOT DecimalNumber
//FloatENotation ::= Number (TTCN_DOT DecimalNumber)? Exponential TTCN_SUB? Number
//Exponential ::= 'E'
private ReferencedValue ::= ExtendedIdentifier ExtendedFieldReference?
private Number ::= TTCN_NUMBER
//private DecimalNumber ::= Num+
private Num ::= TTCN_NUM
private Bstring ::= TTCN_BSTRING
private Bin ::= TTCN_BIN
private Hstring ::= TTCN_HSTRING
private Hex ::= TTCN_HEX
private Ostring ::= TTCN_OSTRING
private Oct ::= Hex Hex
private Cstring ::= TTCN_STRING
//Char ::=
private Identifier ::= TTCN_ID//Alpha ( AlphaNum | TTCN_UNDERSCORE )*
private ExtendedAlphaNum ::= TTCN_STRING
FreeText ::= ExtendedAlphaNum
private AddressValue ::= TTCN_NULL
private OmitKeyword ::= TTCN_OMIT
private InParKeyword ::= TTCN_IN
private OutParKeyword ::= TTCN_OUT
private InOutParKeyword ::= TTCN_INOUT
private FormalValuePar ::= ( InParKeyword | InOutParKeyword | OutParKeyword )? (TTCN_AT_LAZY | TTCN_AT_FUZZY)? Type Identifier (TTCN_ASSIGN ( Expression | TTCN_SUB ))?
private FormalPortPar ::= InOutParKeyword? Identifier Identifier
private FormalTimerPar ::= InOutParKeyword? TTCN_TIMER Identifier
private FormalTemplatePar ::= ( InParKeyword | OutParKeyword | InOutParKeyword )? ( TTCN_TEMPLATE | RestrictedTemplate ) ( TTCN_AT_LAZY | TTCN_AT_FUZZY )? Type Identifier ( TTCN_ASSIGN ( InLineTemplate | TTCN_SUB ) )?
private RestrictedTemplate ::= OmitKeyword | ( TTCN_TEMPLATE TemplateRestriction )
private TemplateRestriction ::= TTCN_LP ( OmitKeyword | TTCN_VALUE | TTCN_PRESENT ) TTCN_RP
WithStatement ::= TTCN_WITH WithAttribList
private WithAttribList ::= TTCN_LB MultiWithAttrib TTCN_RB
MultiWithAttrib ::= ( SingleWithAttrib TTCN_SEMI? )*
SingleWithAttrib ::= AttribKeyword TTCN_OVERRIDE? AttribQualifier? FreeText
AttribKeyword ::= TTCN_ENCODE | TTCN_VARIANT | TTCN_DISPLAY | TTCN_EXTENSION | TTCN_OPTIONAL
AttribQualifier ::= TTCN_LP DefOrFieldRefList TTCN_RP
DefOrFieldRefList ::= DefOrFieldRef (TTCN_COMMA DefOrFieldRef )*
DefOrFieldRef ::= QualifiedIdentifier | ( ( FieldReference | TTCN_LM TTCN_SUB TTCN_RM ) ExtendedFieldReference? ) | AllRef
QualifiedIdentifier ::= ( Identifier TTCN_DOT )* Identifier
AllRef ::= ( TTCN_GROUP TTCN_ALL (TTCN_EXCEPT TTCN_LB QualifiedIdentifierList TTCN_RB )? ) | ( ( TTCN_TYPE | TTCN_TEMPLATE | TTCN_CONST | TTCN_ALTSTEP | TTCN_TESTCASE | TTCN_FUNCTIOIN | TTCN_SIGNATURE | TTCN_MODULEPAR ) TTCN_ALL (TTCN_EXCEPT TTCN_LB IdentifierList TTCN_RB)? )
BehaviourStatements ::= TestcaseInstance | FunctionInstance | ReturnStatement | AltConstruct | InterleavedConstruct | LabelStatement | GotoStatement | TTCN_REPEAT | DeactivateStatement | AltstepInstance | ActivateOp | TTCN_BREAK | TTCN_CONTINUE
SetLocalVerdict ::= TTCN_SETVERDICT TTCN_LP SingleExpression (TTCN_COMMA LogItem)* TTCN_RP
SUTStatements ::= TTCN_ACTION TTCN_LP ActionText (TTCN_CONNECT ActionText)* TTCN_RP
ActionText ::= FreeText | Expression
ReturnStatement ::= TTCN_RETURN (Expression | InLineTemplate)?
AltConstruct ::= TTCN_ALT TTCN_LB AltGuardList* TTCN_RB
AltGuardList ::= GuardStatement | ElseStatement TTCN_SEMI?
GuardStatement ::= AltGuardChar ( AltstepInstance StatementBlock? | GuardOp StatementBlock )
ElseStatement ::= TTCN_LM TTCN_ELSE TTCN_RM StatementBlock
AltGuardChar ::= TTCN_LM [ BooleanExpression ] TTCN_RM
GuardOp ::= TimeoutStatement | ReceiveStatement | TriggerStatement | GetCallStatement | CatchStatement | CheckStatement | GetReplyStatement | DoneStatement | KilledStatement
InterleavedConstruct ::= TTCN_INTERLEAVE TTCN_LB InterleavedGuardList TTCN_RB
InterleavedGuardList ::= (InterleavedGuardElement TTCN_SEMI?)+
InterleavedGuardElement ::= InterleavedGuard StatementBlock
InterleavedGuard ::= TTCN_LM TTCN_RM GuardOp
LabelStatement ::= TTCN_LABEL Identifier
GotoStatement ::= TTCN_GOTO Identifier
ActivateOp ::= TTCN_ACTIVTE TTCN_LP AltstepInstance TTCN_RP
DeactivateStatement ::= TTCN_DEACTIVTE ( TTCN_LP ComponentOrDefaultReference TTCN_RP )?
BasicStatements ::= Assignment | LogStatement | LoopConstruct | ConditionalConstruct | SelectCaseConstruct | StatementBlock
Expression ::= SingleExpression | CompoundExpression
private CompoundExpression ::= FieldExpressionList | ArrayExpression
private FieldExpressionList ::= TTCN_LB FieldExpressionSpec (TTCN_COMMA FieldExpressionSpec)* TTCN_RB
private FieldExpressionSpec ::= FieldReference TTCN_ASSIGN NotUsedOrExpression
private ArrayExpression ::= TTCN_LB ArrayElementExpressionList? TTCN_RB
private ArrayElementExpressionList ::= NotUsedOrExpression (TTCN_COMMA NotUsedOrExpression)*
private NotUsedOrExpression ::= Expression | TTCN_SUB
ConstantExpression ::= SingleExpression | CompoundConstExpression
BooleanExpression ::= SingleExpression
CompoundConstExpression ::= FieldConstExpressionList | ArrayConstExpression
FieldConstExpressionList ::= TTCN_LB FieldConstExpressionSpec ( TTCN_COMMA FieldConstExpressionSpec )* TTCN_RB
FieldConstExpressionSpec ::= FieldReference TTCN_ASSIGN ConstantExpression
ArrayConstExpression ::= TTCN_LB ArrayElementConstExpressionList? TTCN_RB
ArrayElementConstExpressionList ::= ConstantExpression (TTCN_COMMA ConstantExpression)*
Assignment ::= VariableRef TTCN_ASSIGN ( Expression | TemplateBody )
SingleExpression ::= XorExpression ( TTCN_OR XorExpression )*
private XorExpression ::= AndExpression ( TTCN_XOR AndExpression )*
private AndExpression ::= NotExpression ( TTCN_AND NotExpression )*
private NotExpression ::= TTCN_NOT? EqualExpression
private EqualExpression ::= RelExpression ( EqualOp RelExpression )*
private RelExpression ::= ShiftExpression ( RelOp ShiftExpression )? | CompoundExpression
private ShiftExpression ::= BitOrExpression ( ShiftOp BitOrExpression )*
private BitOrExpression ::= BitXorExpression ( TTCN_OR4B BitXorExpression ) *
private BitXorExpression ::= BitAndExpression ( TTCN_XOR4B BitAndExpression )*
private BitAndExpression ::= BitNotExpression ( TTCN_AND4B BitNotExpression )*
private BitNotExpression ::= TTCN_NOT4B? AddExpression
private AddExpression ::= MulExpression ( AddOp MulExpression )*
private MulExpression ::= UnaryExpression ( MultiplyOp UnaryExpression )* | CompoundExpression
private UnaryExpression ::= UnaryOp? Primary
private Primary ::= OpCall | Value | (TTCN_LP SingleExpression TTCN_RP)
ExtendedFieldReference ::= (( TTCN_DOT ( Identifier | PredefinedType ) ) | ArrayOrBitRef | ( TTCN_LM TTCN_SUB TTCN_RM ))+
OpCall ::= ConfigurationOps | TTCN_GETVERDICT | TimerOps | TestcaseInstance | ( FunctionInstance ExtendedFieldReference? ) | ( TemplateOps ExtendedFieldReference? ) | ActivateOp
private AddOp ::= TTCN_ADD | TTCN_SUB | TTCN_CONNECT
private MultiplyOp ::= TTCN_MUL | TTCN_DIV | TTCN_MOD | TTCN_REM
private UnaryOp ::= TTCN_ADD | TTCN_SUB
private RelOp ::= TTCN_LESS | TTCN_LARGER | TTCN_LARGER_EQ | TTCN_LESS_EQ
private EqualOp ::= TTCN_EQ | TTCN_NOT_EQ
private ShiftOp ::= TTCN_LEFT_SHIFT | TTCN_RIGHT_SHIFT | TTCN_LEFT_SHIFT_AT | TTCN_RIGHT_SHIFT_AT
LogStatement ::= TTCN_LOG TTCN_LP LogItem (TTCN_COMMA LogItem)* TTCN_RP
LogItem ::= FreeText | InLineTemplate
LoopConstruct ::= ForStatement | WhileStatement | DoWhileStatement
ForStatement ::= TTCN_FOR TTCN_LP Initial TTCN_SEMI BooleanExpression TTCN_SEMI Assignment TTCN_RP StatementBlock
Initial ::= VarInstance | Assignment
WhileStatement ::= TTCN_WHILE TTCN_LP BooleanExpression TTCN_RP StatementBlock
DoWhileStatement ::= TTCN_DO StatementBlock TTCN_WHILE TTCN_LP BooleanExpression TTCN_RP
ConditionalConstruct ::= TTCN_IF TTCN_LP BooleanExpression TTCN_RP StatementBlock ElseIfClause* ElseClause?
ElseIfClause ::= TTCN_ELSE TTCN_IF TTCN_LP BooleanExpression TTCN_RP StatementBlock
ElseClause ::= TTCN_ELSE StatementBlock
SelectCaseConstruct ::= TTCN_SELECT TTCN_LP SingleExpression TTCN_RP SelectCaseBody
SelectCaseBody ::= TTCN_LB (SelectCase)+ TTCN_RB
SelectCase ::= TTCN_CASE ( TTCN_LP InLineTemplate (TTCN_COMMA InLineTemplate)* TTCN_RP | TTCN_ELSE ) StatementBlock
private ExtendedIdentifier ::= (Identifier TTCN_DOT)? Identifier
IdentifierList ::= Identifier ( TTCN_COMMA Identifier )
QualifiedIdentifierList ::= QualifiedIdentifier (TTCN_COMMA QualifiedIdentifier )*
